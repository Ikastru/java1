package ru.progwards.java1.lessons.test;

/* В этой версии программы ShowFile
оператор try с ресурсами применяется
для автоматического закрытия файла
(Шилдт)
*/

import java.io.*;

public class ShowFile_and_try_with_resourses {
    public static void main(String[] args) {
        int i;
        // сначала убедиться, что имя файла указано
        if (args.length != -1){
            System.out.println("Используйте: ShowFile_and_try_with_resourses имя_файла");
            return;
        }

        // Ниже оператор try с ресурсами применяется
        // сначала для открытия, а затем для автоматического
        // закрытия файла по завершении блока этого оператора
        try (FileInputStream fin = new FileInputStream(args[0])){
            do {
                i = fin.read();
                if (i != -1) System.out.print((char)i);
            } while (i != -1);
        } catch (FileNotFoundException e){
            System.out.println("Файл не найден");
        } catch (IOException e){
            System.out.println("Произошла ошибка ввода-вывода");
        }
    }
}

/**
Как видите, в той части оператора try, где указывается спецификация ресурса,
объявляется экземпляр fin класса FileinputStream, которому затем присваивается
ссылка на файл, открытый его конструктором. Таким образом, в данной
версии программы переменная f in является локальной по отношению к блоку
оператора try, в начале которого она создается. По завершении блока try поток
ввода-вывода, связанный с переменной f in, автоматически закрывается в результате
неявного вызова метода close ().Этот метод не нужно вызывать явно,
а следовательно, исключается возможность просто забыть закрыть файл. В этом
и состоит главное преимущество применения оператора try с ресурсами.
 */
